object "plonk_verifier" {
  code {
      function allocate(size) -> ptr {
          ptr := mload(0x40)
          if eq(ptr, 0) { ptr := 0x60 }
          mstore(0x40, add(ptr, size))
      }
      let size := datasize("Runtime")
      let offset := allocate(size)
      datacopy(offset, dataoffset("Runtime"), size)
      return(offset, size)
  }

  object "Runtime" {
      code {
          let success:bool := true
          let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
          let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
          function validate_ec_point(x, y) -> valid:bool {
              {
                  let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                  let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                  valid := and(x_lt_p, y_lt_p)
              }
              {
                  let x_is_zero:bool := eq(x, 0)
                  let y_is_zero:bool := eq(y, 0)
                  let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                  let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                  valid := and(x_and_y_is_not_zero, valid)
              }
              {
                  let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                  let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                  let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                  let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                  let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                  valid := and(y_square_eq_x_cube_plus_3, valid)
              }
          }
          mstore(0x20, mod(calldataload(0x0), f_q))
          mstore(0x0, 8635385243961172298007069992281266798017317956805057148308042318392171550498)

          {
              let x := calldataload(0x20)
              mstore(0x40, x)
              let y := calldataload(0x40)
              mstore(0x60, y)
              success := and(validate_ec_point(x, y), success)
          }

          {
              let x := calldataload(0x60)
              mstore(0x80, x)
              let y := calldataload(0x80)
              mstore(0xa0, y)
              success := and(validate_ec_point(x, y), success)
          }

          {
              let x := calldataload(0xa0)
              mstore(0xc0, x)
              let y := calldataload(0xc0)
              mstore(0xe0, y)
              success := and(validate_ec_point(x, y), success)
          }
          mstore(0x100, keccak256(0x0, 256))
          {
              let hash := mload(0x100)
              mstore(0x120, mod(hash, f_q))
              mstore(0x140, hash)
          }
          mstore8(352, 1)
          mstore(0x160, keccak256(0x140, 33))
          {
              let hash := mload(0x160)
              mstore(0x180, mod(hash, f_q))
              mstore(0x1a0, hash)
          }
          mstore8(448, 1)
          mstore(0x1c0, keccak256(0x1a0, 33))
          {
              let hash := mload(0x1c0)
              mstore(0x1e0, mod(hash, f_q))
              mstore(0x200, hash)
          }

          {
              let x := calldataload(0xe0)
              mstore(0x220, x)
              let y := calldataload(0x100)
              mstore(0x240, y)
              success := and(validate_ec_point(x, y), success)
          }

          {
              let x := calldataload(0x120)
              mstore(0x260, x)
              let y := calldataload(0x140)
              mstore(0x280, y)
              success := and(validate_ec_point(x, y), success)
          }

          {
              let x := calldataload(0x160)
              mstore(0x2a0, x)
              let y := calldataload(0x180)
              mstore(0x2c0, y)
              success := and(validate_ec_point(x, y), success)
          }
          mstore(0x2e0, keccak256(0x200, 224))
          {
              let hash := mload(0x2e0)
              mstore(0x300, mod(hash, f_q))
              mstore(0x320, hash)
          }

          {
              let x := calldataload(0x1a0)
              mstore(0x340, x)
              let y := calldataload(0x1c0)
              mstore(0x360, y)
              success := and(validate_ec_point(x, y), success)
          }

          {
              let x := calldataload(0x1e0)
              mstore(0x380, x)
              let y := calldataload(0x200)
              mstore(0x3a0, y)
              success := and(validate_ec_point(x, y), success)
          }

          {
              let x := calldataload(0x220)
              mstore(0x3c0, x)
              let y := calldataload(0x240)
              mstore(0x3e0, y)
              success := and(validate_ec_point(x, y), success)
          }
          mstore(0x400, keccak256(0x320, 224))
          {
              let hash := mload(0x400)
              mstore(0x420, mod(hash, f_q))
              mstore(0x440, hash)
          }
          mstore(0x460, mod(calldataload(0x260), f_q))
          mstore(0x480, mod(calldataload(0x280), f_q))
          mstore(0x4a0, mod(calldataload(0x2a0), f_q))
          mstore(0x4c0, mod(calldataload(0x2c0), f_q))
          mstore(0x4e0, mod(calldataload(0x2e0), f_q))
          mstore(0x500, mod(calldataload(0x300), f_q))
          mstore(0x520, mod(calldataload(0x320), f_q))
          mstore(0x540, mod(calldataload(0x340), f_q))
          mstore(0x560, mod(calldataload(0x360), f_q))
          mstore(0x580, mod(calldataload(0x380), f_q))
          mstore(0x5a0, mod(calldataload(0x3a0), f_q))
          mstore(0x5c0, mod(calldataload(0x3c0), f_q))
          mstore(0x5e0, mod(calldataload(0x3e0), f_q))
          mstore(0x600, mod(calldataload(0x400), f_q))
          mstore(0x620, mod(calldataload(0x420), f_q))
          mstore(0x640, mod(calldataload(0x440), f_q))
          mstore(0x660, mod(calldataload(0x460), f_q))
          mstore(0x680, keccak256(0x440, 576))
          {
              let hash := mload(0x680)
              mstore(0x6a0, mod(hash, f_q))
              mstore(0x6c0, hash)
          }

          {
              let x := calldataload(0x480)
              mstore(0x6e0, x)
              let y := calldataload(0x4a0)
              mstore(0x700, y)
              success := and(validate_ec_point(x, y), success)
          }

          {
              let x := calldataload(0x4c0)
              mstore(0x720, x)
              let y := calldataload(0x4e0)
              mstore(0x740, y)
              success := and(validate_ec_point(x, y), success)
          }

          {
              let x := calldataload(0x500)
              mstore(0x760, x)
              let y := calldataload(0x520)
              mstore(0x780, y)
              success := and(validate_ec_point(x, y), success)
          }
          mstore(0x7a0, keccak256(0x6c0, 224))
          {
              let hash := mload(0x7a0)
              mstore(0x7c0, mod(hash, f_q))
              mstore(0x7e0, hash)
          }
          mstore(0x800, mulmod(mload(0x420), mload(0x420), f_q))
          mstore(0x820, mulmod(mload(0x800), mload(0x800), f_q))
          mstore(0x840, mulmod(mload(0x820), mload(0x820), f_q))
          mstore(0x860, mulmod(mload(0x840), mload(0x840), f_q))
          mstore(0x880, mulmod(mload(0x860), mload(0x860), f_q))
          mstore(0x8a0, mulmod(mload(0x880), mload(0x880), f_q))
          mstore(0x8c0, mulmod(mload(0x8a0), mload(0x8a0), f_q))
          mstore(0x8e0, mulmod(mload(0x8c0), mload(0x8c0), f_q))
          mstore(0x900, addmod(mload(0x8e0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
          mstore(0x920, mulmod(mload(0x900), 21802741923121153053409505722814863857733722351976909209543133076471996743681, f_q))
          mstore(0x940, mulmod(mload(0x920), 10167250710514084151592399827148084713285735496006016499965216114801401041468, f_q))
          mstore(0x960, addmod(mload(0x420), 11720992161325191070654005918109190375262628904410017843732988071774407454149, f_q))
          mstore(0x980, mulmod(mload(0x920), 15620430616972136973029697708057142747056669543503469918700292712864029815878, f_q))
          mstore(0x9a0, addmod(mload(0x420), 6267812254867138249216708037200132341491694856912564424997911473711778679739, f_q))
          mstore(0x9c0, mulmod(mload(0x920), 4658854783519236281304787251426829785380272013053939496434657852755686889074, f_q))
          mstore(0x9e0, addmod(mload(0x420), 17229388088320038940941618493830445303168092387362094847263546333820121606543, f_q))
          mstore(0xa00, mulmod(mload(0x920), 11423757818648818765461327411617109120243501240676889555478397529313037714234, f_q))
          mstore(0xa20, addmod(mload(0x420), 10464485053190456456785078333640165968304863159739144788219806657262770781383, f_q))
          mstore(0xa40, mulmod(mload(0x920), 13677048343952077794467995888380402608453928821079198134318291065290235358859, f_q))
          mstore(0xa60, addmod(mload(0x420), 8211194527887197427778409856876872480094435579336836209379913121285573136758, f_q))
          mstore(0xa80, mulmod(mload(0x920), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))
          mstore(0xaa0, addmod(mload(0x420), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))
          mstore(0xac0, mulmod(mload(0x920), 1, f_q))
          mstore(0xae0, addmod(mload(0x420), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
          {
              let prod := mload(0x960)

              prod := mulmod(mload(0x9a0), prod, f_q)
              mstore(0xb00, prod)

              prod := mulmod(mload(0x9e0), prod, f_q)
              mstore(0xb20, prod)

              prod := mulmod(mload(0xa20), prod, f_q)
              mstore(0xb40, prod)

              prod := mulmod(mload(0xa60), prod, f_q)
              mstore(0xb60, prod)

              prod := mulmod(mload(0xaa0), prod, f_q)
              mstore(0xb80, prod)

              prod := mulmod(mload(0xae0), prod, f_q)
              mstore(0xba0, prod)

              prod := mulmod(mload(0x900), prod, f_q)
              mstore(0xbc0, prod)

          }
          mstore(0xc00, 32)
          mstore(0xc20, 32)
          mstore(0xc40, 32)
          mstore(0xc60, mload(0xbc0))
          mstore(0xc80, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
          mstore(0xca0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
          success := and(eq(staticcall(gas(), 0x5, 0xc00, 0xc0, 0xbe0, 0x20), 1), success)
          {

              let inv := mload(0xbe0)
              let v

              v := mload(0x900)
              mstore(2304, mulmod(mload(0xba0), inv, f_q))
              inv := mulmod(v, inv, f_q)

              v := mload(0xae0)
              mstore(2784, mulmod(mload(0xb80), inv, f_q))
              inv := mulmod(v, inv, f_q)

              v := mload(0xaa0)
              mstore(2720, mulmod(mload(0xb60), inv, f_q))
              inv := mulmod(v, inv, f_q)

              v := mload(0xa60)
              mstore(2656, mulmod(mload(0xb40), inv, f_q))
              inv := mulmod(v, inv, f_q)

              v := mload(0xa20)
              mstore(2592, mulmod(mload(0xb20), inv, f_q))
              inv := mulmod(v, inv, f_q)

              v := mload(0x9e0)
              mstore(2528, mulmod(mload(0xb00), inv, f_q))
              inv := mulmod(v, inv, f_q)

              v := mload(0x9a0)
              mstore(2464, mulmod(mload(0x960), inv, f_q))
              inv := mulmod(v, inv, f_q)
              mstore(0x960, inv)

          }
          mstore(0xcc0, mulmod(mload(0x940), mload(0x960), f_q))
          mstore(0xce0, mulmod(mload(0x980), mload(0x9a0), f_q))
          mstore(0xd00, mulmod(mload(0x9c0), mload(0x9e0), f_q))
          mstore(0xd20, mulmod(mload(0xa00), mload(0xa20), f_q))
          mstore(0xd40, mulmod(mload(0xa40), mload(0xa60), f_q))
          mstore(0xd60, mulmod(mload(0xa80), mload(0xaa0), f_q))
          mstore(0xd80, mulmod(mload(0xac0), mload(0xae0), f_q))
          {
              let result := mulmod(mload(0xd80), mload(0x20), f_q)
              mstore(3488, result)
          }
          mstore(0xdc0, mulmod(mload(0x460), mload(0x4c0), f_q))
          mstore(0xde0, mulmod(mload(0x480), mload(0x4e0), f_q))
          mstore(0xe00, addmod(mload(0xdc0), mload(0xde0), f_q))
          mstore(0xe20, mulmod(mload(0x4a0), mload(0x500), f_q))
          mstore(0xe40, addmod(mload(0xe00), mload(0xe20), f_q))
          mstore(0xe60, mulmod(mload(0x460), mload(0x520), f_q))
          mstore(0xe80, mulmod(mload(0x480), mload(0xe60), f_q))
          mstore(0xea0, addmod(mload(0xe40), mload(0xe80), f_q))
          mstore(0xec0, addmod(mload(0xea0), mload(0x540), f_q))
          mstore(0xee0, addmod(mload(0xec0), mload(0xda0), f_q))
          mstore(0xf00, mulmod(mload(0x300), mload(0xee0), f_q))
          mstore(0xf20, addmod(1, sub(f_q, mload(0x5e0)), f_q))
          mstore(0xf40, mulmod(mload(0xf20), mload(0xd80), f_q))
          mstore(0xf60, addmod(mload(0xf00), mload(0xf40), f_q))
          mstore(0xf80, mulmod(mload(0x300), mload(0xf60), f_q))
          mstore(0xfa0, mulmod(mload(0x640), mload(0x640), f_q))
          mstore(0xfc0, addmod(mload(0xfa0), sub(f_q, mload(0x640)), f_q))
          mstore(0xfe0, mulmod(mload(0xfc0), mload(0xcc0), f_q))
          mstore(0x1000, addmod(mload(0xf80), mload(0xfe0), f_q))
          mstore(0x1020, mulmod(mload(0x300), mload(0x1000), f_q))
          mstore(0x1040, addmod(mload(0x640), sub(f_q, mload(0x620)), f_q))
          mstore(0x1060, mulmod(mload(0x1040), mload(0xd80), f_q))
          mstore(0x1080, addmod(mload(0x1020), mload(0x1060), f_q))
          mstore(0x10a0, mulmod(mload(0x300), mload(0x1080), f_q))
          mstore(0x10c0, addmod(1, sub(f_q, mload(0xcc0)), f_q))
          mstore(0x10e0, addmod(mload(0xce0), mload(0xd00), f_q))
          mstore(0x1100, addmod(mload(0x10e0), mload(0xd20), f_q))
          mstore(0x1120, addmod(mload(0x1100), mload(0xd40), f_q))
          mstore(0x1140, addmod(mload(0x1120), mload(0xd60), f_q))
          mstore(0x1160, addmod(mload(0x10c0), sub(f_q, mload(0x1140)), f_q))
          mstore(0x1180, mulmod(mload(0x580), mload(0x180), f_q))
          mstore(0x11a0, addmod(mload(0x460), mload(0x1180), f_q))
          mstore(0x11c0, addmod(mload(0x11a0), mload(0x1e0), f_q))
          mstore(0x11e0, mulmod(mload(0x5a0), mload(0x180), f_q))
          mstore(0x1200, addmod(mload(0x480), mload(0x11e0), f_q))
          mstore(0x1220, addmod(mload(0x1200), mload(0x1e0), f_q))
          mstore(0x1240, mulmod(mload(0x1220), mload(0x11c0), f_q))
          mstore(0x1260, mulmod(mload(0x1240), mload(0x600), f_q))
          mstore(0x1280, mulmod(1, mload(0x180), f_q))
          mstore(0x12a0, mulmod(mload(0x420), mload(0x1280), f_q))
          mstore(0x12c0, addmod(mload(0x460), mload(0x12a0), f_q))
          mstore(0x12e0, addmod(mload(0x12c0), mload(0x1e0), f_q))
          mstore(0x1300, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x180), f_q))
          mstore(0x1320, mulmod(mload(0x420), mload(0x1300), f_q))
          mstore(0x1340, addmod(mload(0x480), mload(0x1320), f_q))
          mstore(0x1360, addmod(mload(0x1340), mload(0x1e0), f_q))
          mstore(0x1380, mulmod(mload(0x1360), mload(0x12e0), f_q))
          mstore(0x13a0, mulmod(mload(0x1380), mload(0x5e0), f_q))
          mstore(0x13c0, addmod(mload(0x1260), sub(f_q, mload(0x13a0)), f_q))
          mstore(0x13e0, mulmod(mload(0x13c0), mload(0x1160), f_q))
          mstore(0x1400, addmod(mload(0x10a0), mload(0x13e0), f_q))
          mstore(0x1420, mulmod(mload(0x300), mload(0x1400), f_q))
          mstore(0x1440, mulmod(mload(0x5c0), mload(0x180), f_q))
          mstore(0x1460, addmod(mload(0x4a0), mload(0x1440), f_q))
          mstore(0x1480, addmod(mload(0x1460), mload(0x1e0), f_q))
          mstore(0x14a0, mulmod(mload(0x1480), mload(0x660), f_q))
          mstore(0x14c0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x180), f_q))
          mstore(0x14e0, mulmod(mload(0x420), mload(0x14c0), f_q))
          mstore(0x1500, addmod(mload(0x4a0), mload(0x14e0), f_q))
          mstore(0x1520, addmod(mload(0x1500), mload(0x1e0), f_q))
          mstore(0x1540, mulmod(mload(0x1520), mload(0x640), f_q))
          mstore(0x1560, addmod(mload(0x14a0), sub(f_q, mload(0x1540)), f_q))
          mstore(0x1580, mulmod(mload(0x1560), mload(0x1160), f_q))
          mstore(0x15a0, addmod(mload(0x1420), mload(0x1580), f_q))
          mstore(0x15c0, mulmod(mload(0x8e0), mload(0x8e0), f_q))
          mstore(0x15e0, mulmod(mload(0x15c0), mload(0x8e0), f_q))
          mstore(0x1600, mulmod(1, mload(0x8e0), f_q))
          mstore(0x1620, mulmod(1, mload(0x15c0), f_q))
          mstore(0x1640, mulmod(mload(0x15a0), mload(0x900), f_q))
          mstore(0x1660, mulmod(mload(0x7c0), mload(0x7c0), f_q))
          mstore(0x1680, mulmod(mload(0x1660), mload(0x7c0), f_q))
          mstore(0x16a0, mulmod(mload(0x6a0), mload(0x6a0), f_q))
          mstore(0x16c0, mulmod(mload(0x16a0), mload(0x6a0), f_q))
          mstore(0x16e0, mulmod(mload(0x16c0), mload(0x6a0), f_q))
          mstore(0x1700, mulmod(mload(0x16e0), mload(0x6a0), f_q))
          mstore(0x1720, mulmod(mload(0x1700), mload(0x6a0), f_q))
          mstore(0x1740, mulmod(mload(0x1720), mload(0x6a0), f_q))
          mstore(0x1760, mulmod(mload(0x1740), mload(0x6a0), f_q))
          mstore(0x1780, mulmod(mload(0x1760), mload(0x6a0), f_q))
          mstore(0x17a0, mulmod(mload(0x1780), mload(0x6a0), f_q))
          mstore(0x17c0, mulmod(mload(0x17a0), mload(0x6a0), f_q))
          mstore(0x17e0, mulmod(mload(0x17c0), mload(0x6a0), f_q))
          mstore(0x1800, mulmod(mload(0x17e0), mload(0x6a0), f_q))
          mstore(0x1820, mulmod(mload(0x1800), mload(0x6a0), f_q))
          mstore(0x1840, mulmod(mload(0x1820), mload(0x6a0), f_q))
          mstore(0x1860, mulmod(sub(f_q, mload(0x460)), 1, f_q))
          mstore(0x1880, mulmod(sub(f_q, mload(0x480)), mload(0x6a0), f_q))
          mstore(0x18a0, mulmod(1, mload(0x6a0), f_q))
          mstore(0x18c0, addmod(mload(0x1860), mload(0x1880), f_q))
          mstore(0x18e0, mulmod(sub(f_q, mload(0x4a0)), mload(0x16a0), f_q))
          mstore(0x1900, mulmod(1, mload(0x16a0), f_q))
          mstore(0x1920, addmod(mload(0x18c0), mload(0x18e0), f_q))
          mstore(0x1940, mulmod(sub(f_q, mload(0x5e0)), mload(0x16c0), f_q))
          mstore(0x1960, mulmod(1, mload(0x16c0), f_q))
          mstore(0x1980, addmod(mload(0x1920), mload(0x1940), f_q))
          mstore(0x19a0, mulmod(sub(f_q, mload(0x640)), mload(0x16e0), f_q))
          mstore(0x19c0, mulmod(1, mload(0x16e0), f_q))
          mstore(0x19e0, addmod(mload(0x1980), mload(0x19a0), f_q))
          mstore(0x1a00, mulmod(sub(f_q, mload(0x4c0)), mload(0x1700), f_q))
          mstore(0x1a20, mulmod(1, mload(0x1700), f_q))
          mstore(0x1a40, addmod(mload(0x19e0), mload(0x1a00), f_q))
          mstore(0x1a60, mulmod(sub(f_q, mload(0x4e0)), mload(0x1720), f_q))
          mstore(0x1a80, mulmod(1, mload(0x1720), f_q))
          mstore(0x1aa0, addmod(mload(0x1a40), mload(0x1a60), f_q))
          mstore(0x1ac0, mulmod(sub(f_q, mload(0x500)), mload(0x1740), f_q))
          mstore(0x1ae0, mulmod(1, mload(0x1740), f_q))
          mstore(0x1b00, addmod(mload(0x1aa0), mload(0x1ac0), f_q))
          mstore(0x1b20, mulmod(sub(f_q, mload(0x520)), mload(0x1760), f_q))
          mstore(0x1b40, mulmod(1, mload(0x1760), f_q))
          mstore(0x1b60, addmod(mload(0x1b00), mload(0x1b20), f_q))
          mstore(0x1b80, mulmod(sub(f_q, mload(0x540)), mload(0x1780), f_q))
          mstore(0x1ba0, mulmod(1, mload(0x1780), f_q))
          mstore(0x1bc0, addmod(mload(0x1b60), mload(0x1b80), f_q))
          mstore(0x1be0, mulmod(sub(f_q, mload(0x580)), mload(0x17a0), f_q))
          mstore(0x1c00, mulmod(1, mload(0x17a0), f_q))
          mstore(0x1c20, addmod(mload(0x1bc0), mload(0x1be0), f_q))
          mstore(0x1c40, mulmod(sub(f_q, mload(0x5a0)), mload(0x17c0), f_q))
          mstore(0x1c60, mulmod(1, mload(0x17c0), f_q))
          mstore(0x1c80, addmod(mload(0x1c20), mload(0x1c40), f_q))
          mstore(0x1ca0, mulmod(sub(f_q, mload(0x5c0)), mload(0x17e0), f_q))
          mstore(0x1cc0, mulmod(1, mload(0x17e0), f_q))
          mstore(0x1ce0, addmod(mload(0x1c80), mload(0x1ca0), f_q))
          mstore(0x1d00, mulmod(sub(f_q, mload(0x1640)), mload(0x1800), f_q))
          mstore(0x1d20, mulmod(1, mload(0x1800), f_q))
          mstore(0x1d40, mulmod(mload(0x1600), mload(0x1800), f_q))
          mstore(0x1d60, mulmod(mload(0x1620), mload(0x1800), f_q))
          mstore(0x1d80, addmod(mload(0x1ce0), mload(0x1d00), f_q))
          mstore(0x1da0, mulmod(sub(f_q, mload(0x560)), mload(0x1820), f_q))
          mstore(0x1dc0, mulmod(1, mload(0x1820), f_q))
          mstore(0x1de0, addmod(mload(0x1d80), mload(0x1da0), f_q))
          mstore(0x1e00, mulmod(mload(0x1de0), 1, f_q))
          mstore(0x1e20, mulmod(mload(0x18a0), 1, f_q))
          mstore(0x1e40, mulmod(mload(0x1900), 1, f_q))
          mstore(0x1e60, mulmod(mload(0x1960), 1, f_q))
          mstore(0x1e80, mulmod(mload(0x19c0), 1, f_q))
          mstore(0x1ea0, mulmod(mload(0x1a20), 1, f_q))
          mstore(0x1ec0, mulmod(mload(0x1a80), 1, f_q))
          mstore(0x1ee0, mulmod(mload(0x1ae0), 1, f_q))
          mstore(0x1f00, mulmod(mload(0x1b40), 1, f_q))
          mstore(0x1f20, mulmod(mload(0x1ba0), 1, f_q))
          mstore(0x1f40, mulmod(mload(0x1c00), 1, f_q))
          mstore(0x1f60, mulmod(mload(0x1c60), 1, f_q))
          mstore(0x1f80, mulmod(mload(0x1cc0), 1, f_q))
          mstore(0x1fa0, mulmod(mload(0x1d20), 1, f_q))
          mstore(0x1fc0, mulmod(mload(0x1d40), 1, f_q))
          mstore(0x1fe0, mulmod(mload(0x1d60), 1, f_q))
          mstore(0x2000, mulmod(mload(0x1dc0), 1, f_q))
          mstore(0x2020, mulmod(sub(f_q, mload(0x600)), 1, f_q))
          mstore(0x2040, mulmod(sub(f_q, mload(0x660)), mload(0x6a0), f_q))
          mstore(0x2060, addmod(mload(0x2020), mload(0x2040), f_q))
          mstore(0x2080, mulmod(mload(0x2060), mload(0x7c0), f_q))
          mstore(0x20a0, mulmod(1, mload(0x7c0), f_q))
          mstore(0x20c0, mulmod(mload(0x18a0), mload(0x7c0), f_q))
          mstore(0x20e0, addmod(mload(0x1e00), mload(0x2080), f_q))
          mstore(0x2100, addmod(mload(0x1e60), mload(0x20a0), f_q))
          mstore(0x2120, addmod(mload(0x1e80), mload(0x20c0), f_q))
          mstore(0x2140, mulmod(sub(f_q, mload(0x620)), 1, f_q))
          mstore(0x2160, mulmod(mload(0x2140), mload(0x1660), f_q))
          mstore(0x2180, mulmod(1, mload(0x1660), f_q))
          mstore(0x21a0, addmod(mload(0x20e0), mload(0x2160), f_q))
          mstore(0x21c0, addmod(mload(0x2100), mload(0x2180), f_q))
          mstore(0x21e0, mulmod(1, mload(0x420), f_q))
          mstore(0x2200, mulmod(1, mload(0x21e0), f_q))
          mstore(0x2220, mulmod(7393649265675507591155086225434297871937368251641985215568891852805958167681, mload(0x420), f_q))
          mstore(0x2240, mulmod(mload(0x20a0), mload(0x2220), f_q))
          mstore(0x2260, mulmod(10167250710514084151592399827148084713285735496006016499965216114801401041468, mload(0x420), f_q))
          mstore(0x2280, mulmod(mload(0x2180), mload(0x2260), f_q))
          mstore(0x22a0, 0x0000000000000000000000000000000000000000000000000000000000000001)
          mstore(0x22c0, 0x0000000000000000000000000000000000000000000000000000000000000002)
          mstore(0x22e0, mload(0x21a0))
          success := and(eq(staticcall(gas(), 0x7, 0x22a0, 0x60, 0x22a0, 0x40), 1), success)
          mstore(0x2300, mload(0x22a0))
          mstore(0x2320, mload(0x22c0))
          mstore(0x2340, mload(0x40))
          mstore(0x2360, mload(0x60))
          success := and(eq(staticcall(gas(), 0x6, 0x2300, 0x80, 0x2300, 0x40), 1), success)
          mstore(0x2380, mload(0x80))
          mstore(0x23a0, mload(0xa0))
          mstore(0x23c0, mload(0x1e20))
          success := and(eq(staticcall(gas(), 0x7, 0x2380, 0x60, 0x2380, 0x40), 1), success)
          mstore(0x23e0, mload(0x2300))
          mstore(0x2400, mload(0x2320))
          mstore(0x2420, mload(0x2380))
          mstore(0x2440, mload(0x23a0))
          success := and(eq(staticcall(gas(), 0x6, 0x23e0, 0x80, 0x23e0, 0x40), 1), success)
          mstore(0x2460, mload(0xc0))
          mstore(0x2480, mload(0xe0))
          mstore(0x24a0, mload(0x1e40))
          success := and(eq(staticcall(gas(), 0x7, 0x2460, 0x60, 0x2460, 0x40), 1), success)
          mstore(0x24c0, mload(0x23e0))
          mstore(0x24e0, mload(0x2400))
          mstore(0x2500, mload(0x2460))
          mstore(0x2520, mload(0x2480))
          success := and(eq(staticcall(gas(), 0x6, 0x24c0, 0x80, 0x24c0, 0x40), 1), success)
          mstore(0x2540, mload(0x220))
          mstore(0x2560, mload(0x240))
          mstore(0x2580, mload(0x21c0))
          success := and(eq(staticcall(gas(), 0x7, 0x2540, 0x60, 0x2540, 0x40), 1), success)
          mstore(0x25a0, mload(0x24c0))
          mstore(0x25c0, mload(0x24e0))
          mstore(0x25e0, mload(0x2540))
          mstore(0x2600, mload(0x2560))
          success := and(eq(staticcall(gas(), 0x6, 0x25a0, 0x80, 0x25a0, 0x40), 1), success)
          mstore(0x2620, mload(0x260))
          mstore(0x2640, mload(0x280))
          mstore(0x2660, mload(0x2120))
          success := and(eq(staticcall(gas(), 0x7, 0x2620, 0x60, 0x2620, 0x40), 1), success)
          mstore(0x2680, mload(0x25a0))
          mstore(0x26a0, mload(0x25c0))
          mstore(0x26c0, mload(0x2620))
          mstore(0x26e0, mload(0x2640))
          success := and(eq(staticcall(gas(), 0x6, 0x2680, 0x80, 0x2680, 0x40), 1), success)
          mstore(0x2700, 0x2ac3c7ffb7d028f54dca92edb2b708bf017cb9c515f19faf65974c73f3b3a120)
          mstore(0x2720, 0x1bccaafe0ce35c845d227058094edd320ed24c9bde69b7826471c6c8850802a3)
          mstore(0x2740, mload(0x1ea0))
          success := and(eq(staticcall(gas(), 0x7, 0x2700, 0x60, 0x2700, 0x40), 1), success)
          mstore(0x2760, mload(0x2680))
          mstore(0x2780, mload(0x26a0))
          mstore(0x27a0, mload(0x2700))
          mstore(0x27c0, mload(0x2720))
          success := and(eq(staticcall(gas(), 0x6, 0x2760, 0x80, 0x2760, 0x40), 1), success)
          mstore(0x27e0, 0x0ccbfa4a9a0aebe7cd48bf524d2fa132eba745459ea18bc03ea040d9b52429b7)
          mstore(0x2800, 0x03a02074042d66541f6f74d9a2ffd737bd35748eff9738d1baef61d5ebd661ae)
          mstore(0x2820, mload(0x1ec0))
          success := and(eq(staticcall(gas(), 0x7, 0x27e0, 0x60, 0x27e0, 0x40), 1), success)
          mstore(0x2840, mload(0x2760))
          mstore(0x2860, mload(0x2780))
          mstore(0x2880, mload(0x27e0))
          mstore(0x28a0, mload(0x2800))
          success := and(eq(staticcall(gas(), 0x6, 0x2840, 0x80, 0x2840, 0x40), 1), success)
          mstore(0x28c0, 0x030265cf7f878ea79d0e98c314cd9d4aa0302af5906646886415583e1def3e2d)
          mstore(0x28e0, 0x233489648a926c124662ef6b87baf7c0bad00c41c88cba560cd69a933eaee7a4)
          mstore(0x2900, mload(0x1ee0))
          success := and(eq(staticcall(gas(), 0x7, 0x28c0, 0x60, 0x28c0, 0x40), 1), success)
          mstore(0x2920, mload(0x2840))
          mstore(0x2940, mload(0x2860))
          mstore(0x2960, mload(0x28c0))
          mstore(0x2980, mload(0x28e0))
          success := and(eq(staticcall(gas(), 0x6, 0x2920, 0x80, 0x2920, 0x40), 1), success)
          mstore(0x29a0, 0x2e3ffc3edb9aa6c0c20fc3d48a06fc6ce52ac2ce7074b12e5b01f7c9d3635b1b)
          mstore(0x29c0, 0x1f2bc993214a4ac2f26a114d62504604450cb1a0eb5c2fa630441fc3a78b8723)
          mstore(0x29e0, mload(0x1f00))
          success := and(eq(staticcall(gas(), 0x7, 0x29a0, 0x60, 0x29a0, 0x40), 1), success)
          mstore(0x2a00, mload(0x2920))
          mstore(0x2a20, mload(0x2940))
          mstore(0x2a40, mload(0x29a0))
          mstore(0x2a60, mload(0x29c0))
          success := and(eq(staticcall(gas(), 0x6, 0x2a00, 0x80, 0x2a00, 0x40), 1), success)
          mstore(0x2a80, 0x1d4773a3c539e3703a79d0efd0b79aa0d0359b9e72cf3e129c6aab267880adb6)
          mstore(0x2aa0, 0x0b95b7d1be36d2d294ac2f04c30497ef7e7fad39bf1632cccb010941230a2397)
          mstore(0x2ac0, mload(0x1f20))
          success := and(eq(staticcall(gas(), 0x7, 0x2a80, 0x60, 0x2a80, 0x40), 1), success)
          mstore(0x2ae0, mload(0x2a00))
          mstore(0x2b00, mload(0x2a20))
          mstore(0x2b20, mload(0x2a80))
          mstore(0x2b40, mload(0x2aa0))
          success := and(eq(staticcall(gas(), 0x6, 0x2ae0, 0x80, 0x2ae0, 0x40), 1), success)
          mstore(0x2b60, 0x0fccec67276269df54b58d742877ca3fc400741a555f207f8d0ff5f45479d0d1)
          mstore(0x2b80, 0x06af5a0e6c84525b05ddc1c7fd7ecca85f1bb33ce4c66a959221f9fe3a869be6)
          mstore(0x2ba0, mload(0x1f40))
          success := and(eq(staticcall(gas(), 0x7, 0x2b60, 0x60, 0x2b60, 0x40), 1), success)
          mstore(0x2bc0, mload(0x2ae0))
          mstore(0x2be0, mload(0x2b00))
          mstore(0x2c00, mload(0x2b60))
          mstore(0x2c20, mload(0x2b80))
          success := and(eq(staticcall(gas(), 0x6, 0x2bc0, 0x80, 0x2bc0, 0x40), 1), success)
          mstore(0x2c40, 0x24df39c201b95a0f729c2c97f9550159125aba281c7363d12e6c08227a304a3f)
          mstore(0x2c60, 0x02183a098a9a01aae5d783fc3951f09cce5492628a46ec2ee75afd0fdf26d3d6)
          mstore(0x2c80, mload(0x1f60))
          success := and(eq(staticcall(gas(), 0x7, 0x2c40, 0x60, 0x2c40, 0x40), 1), success)
          mstore(0x2ca0, mload(0x2bc0))
          mstore(0x2cc0, mload(0x2be0))
          mstore(0x2ce0, mload(0x2c40))
          mstore(0x2d00, mload(0x2c60))
          success := and(eq(staticcall(gas(), 0x6, 0x2ca0, 0x80, 0x2ca0, 0x40), 1), success)
          mstore(0x2d20, 0x0bb7a4073defe0cb9e1a28d3ed990185e971cba85094bfea58362cb1cdb2e2e8)
          mstore(0x2d40, 0x2a26510022d6eab85a3f3c3840f67410d857139a96783b2d0e57f67bd796a522)
          mstore(0x2d60, mload(0x1f80))
          success := and(eq(staticcall(gas(), 0x7, 0x2d20, 0x60, 0x2d20, 0x40), 1), success)
          mstore(0x2d80, mload(0x2ca0))
          mstore(0x2da0, mload(0x2cc0))
          mstore(0x2dc0, mload(0x2d20))
          mstore(0x2de0, mload(0x2d40))
          success := and(eq(staticcall(gas(), 0x6, 0x2d80, 0x80, 0x2d80, 0x40), 1), success)
          mstore(0x2e00, mload(0x340))
          mstore(0x2e20, mload(0x360))
          mstore(0x2e40, mload(0x1fa0))
          success := and(eq(staticcall(gas(), 0x7, 0x2e00, 0x60, 0x2e00, 0x40), 1), success)
          mstore(0x2e60, mload(0x2d80))
          mstore(0x2e80, mload(0x2da0))
          mstore(0x2ea0, mload(0x2e00))
          mstore(0x2ec0, mload(0x2e20))
          success := and(eq(staticcall(gas(), 0x6, 0x2e60, 0x80, 0x2e60, 0x40), 1), success)
          mstore(0x2ee0, mload(0x380))
          mstore(0x2f00, mload(0x3a0))
          mstore(0x2f20, mload(0x1fc0))
          success := and(eq(staticcall(gas(), 0x7, 0x2ee0, 0x60, 0x2ee0, 0x40), 1), success)
          mstore(0x2f40, mload(0x2e60))
          mstore(0x2f60, mload(0x2e80))
          mstore(0x2f80, mload(0x2ee0))
          mstore(0x2fa0, mload(0x2f00))
          success := and(eq(staticcall(gas(), 0x6, 0x2f40, 0x80, 0x2f40, 0x40), 1), success)
          mstore(0x2fc0, mload(0x3c0))
          mstore(0x2fe0, mload(0x3e0))
          mstore(0x3000, mload(0x1fe0))
          success := and(eq(staticcall(gas(), 0x7, 0x2fc0, 0x60, 0x2fc0, 0x40), 1), success)
          mstore(0x3020, mload(0x2f40))
          mstore(0x3040, mload(0x2f60))
          mstore(0x3060, mload(0x2fc0))
          mstore(0x3080, mload(0x2fe0))
          success := and(eq(staticcall(gas(), 0x6, 0x3020, 0x80, 0x3020, 0x40), 1), success)
          mstore(0x30a0, mload(0x2a0))
          mstore(0x30c0, mload(0x2c0))
          mstore(0x30e0, mload(0x2000))
          success := and(eq(staticcall(gas(), 0x7, 0x30a0, 0x60, 0x30a0, 0x40), 1), success)
          mstore(0x3100, mload(0x3020))
          mstore(0x3120, mload(0x3040))
          mstore(0x3140, mload(0x30a0))
          mstore(0x3160, mload(0x30c0))
          success := and(eq(staticcall(gas(), 0x6, 0x3100, 0x80, 0x3100, 0x40), 1), success)
          mstore(0x3180, mload(0x6e0))
          mstore(0x31a0, mload(0x700))
          mstore(0x31c0, mload(0x2200))
          success := and(eq(staticcall(gas(), 0x7, 0x3180, 0x60, 0x3180, 0x40), 1), success)
          mstore(0x31e0, mload(0x3100))
          mstore(0x3200, mload(0x3120))
          mstore(0x3220, mload(0x3180))
          mstore(0x3240, mload(0x31a0))
          success := and(eq(staticcall(gas(), 0x6, 0x31e0, 0x80, 0x31e0, 0x40), 1), success)
          mstore(0x3260, mload(0x720))
          mstore(0x3280, mload(0x740))
          mstore(0x32a0, mload(0x2240))
          success := and(eq(staticcall(gas(), 0x7, 0x3260, 0x60, 0x3260, 0x40), 1), success)
          mstore(0x32c0, mload(0x31e0))
          mstore(0x32e0, mload(0x3200))
          mstore(0x3300, mload(0x3260))
          mstore(0x3320, mload(0x3280))
          success := and(eq(staticcall(gas(), 0x6, 0x32c0, 0x80, 0x32c0, 0x40), 1), success)
          mstore(0x3340, mload(0x760))
          mstore(0x3360, mload(0x780))
          mstore(0x3380, mload(0x2280))
          success := and(eq(staticcall(gas(), 0x7, 0x3340, 0x60, 0x3340, 0x40), 1), success)
          mstore(0x33a0, mload(0x32c0))
          mstore(0x33c0, mload(0x32e0))
          mstore(0x33e0, mload(0x3340))
          mstore(0x3400, mload(0x3360))
          success := and(eq(staticcall(gas(), 0x6, 0x33a0, 0x80, 0x33a0, 0x40), 1), success)
          mstore(0x3420, mload(0x720))
          mstore(0x3440, mload(0x740))
          mstore(0x3460, mload(0x20a0))
          success := and(eq(staticcall(gas(), 0x7, 0x3420, 0x60, 0x3420, 0x40), 1), success)
          mstore(0x3480, mload(0x6e0))
          mstore(0x34a0, mload(0x700))
          mstore(0x34c0, mload(0x3420))
          mstore(0x34e0, mload(0x3440))
          success := and(eq(staticcall(gas(), 0x6, 0x3480, 0x80, 0x3480, 0x40), 1), success)
          mstore(0x3500, mload(0x760))
          mstore(0x3520, mload(0x780))
          mstore(0x3540, mload(0x2180))
          success := and(eq(staticcall(gas(), 0x7, 0x3500, 0x60, 0x3500, 0x40), 1), success)
          mstore(0x3560, mload(0x3480))
          mstore(0x3580, mload(0x34a0))
          mstore(0x35a0, mload(0x3500))
          mstore(0x35c0, mload(0x3520))
          success := and(eq(staticcall(gas(), 0x6, 0x3560, 0x80, 0x3560, 0x40), 1), success)
          mstore(0x35e0, mload(0x33a0))
          mstore(0x3600, mload(0x33c0))
          mstore(0x3620, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
          mstore(0x3640, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
          mstore(0x3660, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
          mstore(0x3680, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
          mstore(0x36a0, mload(0x3560))
          mstore(0x36c0, mload(0x3580))
          mstore(0x36e0, 0x2ca03827d09785f0bde4662fcb9c3cf516898358049d881f7e61382fc8567972)
          mstore(0x3700, 0x178f6b3a7e1c0e467ebf2bb3757f87013c24d7c834109cdc392db0db2d6561de)
          mstore(0x3720, 0x2e1569756424bfc338ae1c4748f25b7d06eea139d9297caeeae6dc48b506ca12)
          mstore(0x3740, 0x246a54398fcdb8ca4896f96110d566d7470bf7a9bd62fea73626693fe7bc526c)
          success := and(eq(staticcall(gas(), 0x8, 0x35e0, 0x180, 0x35e0, 0x20), 1), success)
          success := and(eq(mload(0x35e0), 1), success)

          if not(success) { revert(0, 0) }
          return(0, 0)
      }
  }
}
